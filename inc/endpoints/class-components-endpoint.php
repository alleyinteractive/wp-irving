<?php
/**
 * Class file for Components endpoint.
 *
 * @package WP_Irving
 */

namespace WP_Irving\REST_API;

/**
 * Components endpoint.
 */
class Components_Endpoint extends Endpoint {

	/**
	 * Path being queried.
	 *
	 * @var string
	 */
	public $path = '';

	/**
	 * Context of request.
	 *
	 * @var string
	 */
	public $context = 'page';

	/**
	 * Query generated by path.
	 *
	 * @var null
	 */
	public $query = null;

	/**
	 * Data for response.
	 *
	 * @var array
	 */
	public $data = [
		'defaults' => [],
		'page'     => [],
	];

	/**
	 * Initialize class.
	 */
	public function __construct() {
		parent::__construct();

		add_filter( 'query_vars', [ $this, 'modify_query_vars' ] );
		add_filter( 'post_row_actions', [ $this, 'add_api_link' ], 10, 2 );
		add_filter( 'page_row_actions', [ $this, 'add_api_link' ], 10, 2 );
	}

	/**
	 * Register the REST API routes.
	 */
	public function register_rest_routes() {
		register_rest_route(
			$this->namespace,
			'/components/',
			[
				'methods'  => \WP_REST_Server::READABLE,
				'callback' => [ $this, 'get_route_response' ],
			]
		);
	}

	/**
	 * Callback for the route.
	 *
	 * @param  WP_REST_Request $request Request object.
	 *
	 * @return array
	 */
	public function get_route_response( $request ) {

		/**
		 * Action fired on the request.
		 *
		 * @param \WP_REST_Request $request  WP_REST_Request object.
		 */
		do_action( 'wp_irving_components_request', $request );

		$params = $request->get_params();
		// Parse path and context.
		$this->parse_path( $params['path'] ?? '' );
		$this->context = $params['context'] ?? '';

		// Pass any extra included params.
		$params = array_filter( $params, function( $key ) {
			return ! in_array( $key, [ 'path', 'context' ] );
		}, ARRAY_FILTER_USE_KEY );

		$this->query = $this->build_query( $this->path, $params );

		/**
		 * Modify the output of the components route.
		 *
		 * @param array           $data     Data for response.
		 * @param WP_Query        $query    WP_Query object corresponding to this
		 *                                  request.
		 * @param string          $context  The context for this request.
		 * @param string          $path     The path for this request.
		 * @param WP_REST_Request $request  WP_REST_Request object.
		 */
		$data = (array) apply_filters(
			'wp_irving_components_route',
			$this->data,
			$this->query,
			$this->context,
			$this->path,
			$request
		);

		// Create the response object.
		$response = new \WP_REST_Response( $data );

		// Add a custom status code.
		$status = apply_filters( 'wp_irving_components_route_status', 200 );
		$response->set_status( $status );

		return $response;
	}

	/**
	 * Execute filters and actions for the path.
	 *
	 * @param  string $raw_path Raw path from request.
	 */
	public function parse_path( string $raw_path = '' ) {

		/**
		 * Action fired on the raw path value.
		 *
		 * @param  string $raw_path Raw path value from request.
		 */
		do_action( 'wp_irving_components_raw_path', $raw_path );

		/**
		 * Modify the output of the components route.
		 *
		 * @param  string $raw_path Raw path value from request.
		 */
		$this->path = (string) apply_filters( 'wp_irving_components_path', $raw_path );

		/**
		 * Action fired on the sanitized path value.
		 *
		 * @param  string $raw_path Raw path value from request.
		 */
		do_action( 'wp_irving_components_path', $this->path );
	}

	/**
	 * Returns a WP_Query object based on path.
	 *
	 * @param  string $path Path of request.
	 * @param  array  $params The request query params.
	 * @return \WP_Query Resulting query.
	 */
	public function build_query( $path, $params ) {
		global $wp_rewrite;

		// Query to execute.
		$query = '';

		// Get path, remove leading slash.
		$trimmed_path = ltrim( $path, '/' );

		// Loop through rewrite rules.
		$rewrites = $wp_rewrite->wp_rewrite_rules();
		foreach ( $rewrites as $match => $query ) {

			// Rewrite rule match.
			if ( preg_match( "#^$match#", $trimmed_path, $matches ) ) {

				// Prep query for use in WP_Query.
				$query = preg_replace( '!^.+\?!', '', $query );
				$query = addslashes( \WP_MatchesMapRegex::apply( $query, $matches ) );
				parse_str( $query, $perma_query_vars );
				break;
			}
		}

		// Add irving-path to the query.
		$query = add_query_arg(
			'irving-path',
			$path,
			$query
		);

		// Add any extra included params.
		foreach ( $params as $key => $value ) {
			$query = add_query_arg( $key, $value, $query );
		}

		// add_query_arg will encode the url, which we don't want.
		$query = urldecode( $query );

		return new \WP_Query( $query );
	}

	/**
	 * Add custom query vars.
	 *
	 * @param array $vars Array of current query vars.
	 * @return array $vars Array of query vars.
	 */
	public function modify_query_vars( $vars ) {
		$vars[] = 'irving-path';
		return $vars;
	}

	/**
	 * Add API endpoint link to post row actions.
	 *
	 * @param  array    $actions Action links.
	 * @param  \WP_Post $post    WP_Post object.
	 * @return array Updated action links.
	 */
	public function add_api_link( array $actions, \WP_Post $post ) : array {

		// Only apply to published posts.
		if ( 'publish' !== $post->post_status ) {
			return $actions;
		}

		// Get post permalink.
		$permalink = get_permalink( $post );

		// Extract path.
		$path = wp_parse_url( $permalink, PHP_URL_PATH );

		// Apply path to rest URL for Irving components endpoint.
		// Use site_url() instead of rest_url() because WP-Irving uses WP_HOME
		// as the Irving App, and rest_url() uses WP_HOME instead of
		// WP_SITEURL, which is what we need to use.
		$path_url = add_query_arg(
			'path',
			$path,
			site_url( rest_get_url_prefix() . '/irving/v1/components' )
		);

		// Add new link.
		$actions['api'] = sprintf(
			'<a href="%1$s">API</a>',
			esc_url( $path_url )
		);

		return $actions;
	}
}

new Components_Endpoint();
